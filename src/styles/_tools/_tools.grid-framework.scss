// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: "#{$grid-col-prefix}xs-#{$i}, #{$grid-col-prefix}sm-#{$i}, #{$grid-col-prefix}md-#{$i}, #{$grid-col-prefix}lg-#{$i}, #{$grid-col-nested-prefix}xs-#{$i}, #{$grid-col-nested-prefix}-2-sm-#{$i}, #{$grid-col-nested-prefix}md-#{$i}, #{$grid-col-nested-prefix}lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, #{$grid-col-prefix}xs-#{$i}, #{$grid-col-prefix}sm-#{$i}, #{$grid-col-prefix}md-#{$i}, #{$grid-col-prefix}lg-#{$i}, #{$grid-col-nested-prefix}xs-#{$i}, #{$grid-col-nested-prefix}-2-sm-#{$i}, #{$grid-col-nested-prefix}md-#{$i}, #{$grid-col-nested-prefix}lg-#{$i}";
  }
  #{$list} {
    position: relative;
    display: block;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: "#{$grid-col-prefix}#{$class}-#{$i}, #{$grid-col-nested-prefix}#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, #{$grid-col-prefix}#{$class}-#{$i}, #{$grid-col-nested-prefix}#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    #{$grid-col-prefix}#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));

      @if ($grid-nested) {
        @for $column from 0 through $index {
          @if ($index > 0) {
            > .row--nested > #{$grid-col-nested-prefix}#{$class}-#{$column} {
              width: percentage(($column / $index));
            }
          }
        }
      }

    }
  }
  @if ($type == push) and ($index > 0) {
    #{$grid-col-prefix}#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));

      @if ($grid-nested) {
        @for $column from 0 through $index {
          @if ($index > 0) {
            > .row > #{$grid-col-nested-prefix}#{$class}-#{$column} {
              left: percentage(($column / $index));
            }
          }
        }
      }

    }
  }
  @if ($type == push) and ($index == 0) {
    #{$grid-col-prefix}#{$class}-push-0,
    #{$grid-col-nested-prefix}#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    #{$grid-col-prefix}#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));

      @if ($grid-nested) {
        @for $column from 0 through $index {
          @if ($index > 0) {
            > .row > #{$grid-col-nested-prefix}#{$class}-#{$column} {
              right: percentage(($column / $index));
            }
          }
        }
      }

    }
  }
  @if ($type == pull) and ($index == 0) {
    #{$grid-col-prefix}#{$class}-pull-0,
    #{$grid-col-nested-prefix}#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    #{$grid-col-prefix}#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));

      @if ($grid-nested) {
        @for $column from 0 through $index {
          @if ($index > 0) {
            > .row > #{$grid-col-nested-prefix}#{$class}-#{$column} {
              margin-left: percentage(($column / $index));
            }
          }
        }
      }

    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}
